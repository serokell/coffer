# SPDX-FileCopyrightText: 2023 Serokell <https://serokell.io>
#
# SPDX-License-Identifier: MPL-2.0

name: Nix flake check
on: [pull_request]

jobs:
  general-checks:
    runs-on: [self-hosted, nix]
    steps:
      - uses: actions/checkout@v4

      - name: check trailing whitespaces
        run: nix-build ci.nix -A trailing-whitespace-check

      - name: shellcheck
        run: nix shell -f ci.nix pkgs.shellcheck -c find . -name '*.sh' -exec shellcheck {} +
        if: success() || failure()

      - name: validate cabal files
        run: nix shell -f ci.nix stack2cabal pkgs.diffutils -c ./scripts/validate-cabal-files.sh
        if: success() || failure()

      - name: stylish
        run: nix shell -f ci.nix pkgs.gnumake pkgs-stylish.stylish-haskell -c ./scripts/validate-stylish.sh
        if: success() || failure()

      - name: lint
        run: nix shell -f ci.nix pkgs.haskellPackages.hlint -c hlint .
        if: success() || failure()

      - name: xrefcheck
        run: nix shell -f ci.nix xrefcheck -c xrefcheck
        if: success() || failure()

      - name: REUSE lint
        run: nix shell -f ci.nix pkgs.reuse -c reuse lint
        if: success() || failure()

  build:
    runs-on: [self-hosted, nix]
    steps:
      - uses: actions/checkout@v4

      - name: build
        run: nix-build ci.nix -A lib -A cli -A server

      - name: linux static executable
        run: nix-build ci.nix -A coffer-static
        if: success() || failure()

  tests:
    runs-on: [self-hosted, nix]
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: swagger docs
        run: |
          nix-build ci.nix -A coffer-swagger-api
          ./scripts/validate-swagger-docs.sh ./result/bin/coffer-swagger-api

      - name: server integration
        run: |
          nix-build ci.nix -A server-integration
          nix shell -f ci.nix pkgs.vault -c ./result/bin/server-integration
        if: success() || failure()

      - name: tests
        run: |
          nix-build ci.nix -A tests
          ./result/bin/test
        if: success() || failure()

      - name: golden tests
        run: nix shell -f ci.nix project.coffer.components.exes.coffer pkgs.vault pkgs.bats -c ./scripts/run-bats-tests.sh
        if: success() || failure()

      - name: haddock
        run: nix-build ci.nix -A haddock
        if: success() || failure()

      - name: weeder
        run: |
          nix-build ci.nix -A weeder-script
          ./result
        if: success() || failure()
